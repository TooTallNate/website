/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: EsiHere (https://sketchfab.com/EsiHere)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/isometric-japanese-room-8f3f4d1f21354a45b737f2a6bde60370
title: Isometric Japanese Room
*/

import type * as THREE from "three";
import { CameraControls, Html, useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import type { RefObject } from "react";

type GLTFResult = GLTF & {
  nodes: {
    Cube013_main_0: THREE.Mesh;
  };
  materials: {
    main: THREE.MeshStandardMaterial;
  };
};

function Room(
  props: JSX.IntrinsicElements["group"] & {
    controls: RefObject<CameraControls>;
  }
) {
  const { nodes, materials } = useGLTF(
    "/models/room/isometric_japanese_room.glb"
  ) as GLTFResult;
  const { controls } = props;
  const handleClick = () => {
    controls.current?.rotate(Math.PI / 4, 0, true);
    console.log(controls);
  };
  return (
    <group {...props} dispose={null} scale={0.5}>
      <group scale={0.01}>
        <group
          position={[0, 2000, 2000]}
          rotation={[-Math.PI / 2, 0, Math.PI / 2]}
          scale={[48.2, 1737.89, 43.74]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube013_main_0.geometry}
            material={materials.main}
          />
        </group>
        <group
          position={[-4079.15, 2848.62, -433.96]}
          rotation={[1.32, -0.62, 2.07]}
          scale={[108.95, 94.21, 108.95]}
        >
          <group rotation={[Math.PI / 2, 0, 0]} />
        </group>
      </group>
      <Html>
        <button onClick={handleClick}>Computer</button>
      </Html>
    </group>
  );
}

useGLTF.preload("/models/room/isometric_japanese_room.glb");

export default Room;
